# -*- coding: utf-8 -*-
"""image_classification_cifar10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TU-ltwa3Q8EZ_roMk1NYG2WvCDaAIlIm
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import classification_report

(X_train,Y_train),(X_test,Y_test)=tf.keras.datasets.cifar10.load_data()

#check of dimensions
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_train.shape)

Y_train=Y_train.reshape(-1,)
Y_test=Y_test.reshape(-1,)

classes=['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

#plotting a sample
def plot_sample(X,Y,index):
  plt.figure(figsize=(5,1))
  plt.imshow(X[index])
  print(classes[Y[index]])

plot_sample(X_train,Y_train,8)

#scaling images
scaled_X_train=X_train/255
scaled_X_test=X_test/255

#one hot encoding of Y
Y_train_categorical=keras.utils.to_categorical(
    Y_train,num_classes=10
)
Y_test_categorical=keras.utils.to_categorical(
    Y_test,num_classes=10
)
Y_train_categorical[:5]

model=keras.models.Sequential([
    keras.layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(32,32,3)),
    keras.layers.MaxPool2D((2,2)),
    keras.layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu'),
    keras.layers.MaxPool2D((2,2)),
    keras.layers.Conv2D(filters=32,kernel_size=(3,3),activation='relu'),
    keras.layers.MaxPool2D((2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(100,activation='relu'),
    keras.layers.Dense(75,activation='relu'),
    keras.layers.Dense(50,activation='relu'),
    keras.layers.Dense(25,activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])
model.compile(
    optimizer='SGD',
    loss=keras.losses.categorical_crossentropy,
    metrics=['accuracy']
)
model.fit(scaled_X_train,Y_train_categorical,epochs=50)

model.evaluate(scaled_X_test,Y_test_categorical)

Y_pred=model.predict(scaled_X_test)
Y_pred[0]

#prediction
Y_classes=[np.argmax(elemnt) for elemnt in Y_pred]

#classification report
print(classification_report(Y_test,Y_classes))